//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `coal`.
    static let coal = Rswift.ColorResource(bundle: R.hostingBundle, name: "coal")
    /// Color `forIcons`.
    static let forIcons = Rswift.ColorResource(bundle: R.hostingBundle, name: "forIcons")
    /// Color `grayViolet`.
    static let grayViolet = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayViolet")
    /// Color `grayish`.
    static let grayish = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayish")
    /// Color `whiteGray`.
    static let whiteGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "whiteGray")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func coal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "forIcons", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func forIcons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.forIcons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayViolet", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayViolet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayViolet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayish", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "whiteGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coal", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func coal(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coal.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "forIcons", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func forIcons(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.forIcons.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayViolet", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayViolet(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayViolet.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayish", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayish(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayish.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "whiteGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Commissioner-Black.ttf`.
    static let commissionerBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-Black", pathExtension: "ttf")
    /// Resource file `Commissioner-Bold.ttf`.
    static let commissionerBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-Bold", pathExtension: "ttf")
    /// Resource file `Commissioner-ExtraBold.ttf`.
    static let commissionerExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-ExtraBold", pathExtension: "ttf")
    /// Resource file `Commissioner-Light.ttf`.
    static let commissionerLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-Light", pathExtension: "ttf")
    /// Resource file `Commissioner-Medium.ttf`.
    static let commissionerMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-Medium", pathExtension: "ttf")
    /// Resource file `Commissioner-Regular.ttf`.
    static let commissionerRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-Regular", pathExtension: "ttf")
    /// Resource file `Commissioner-SemiBold.ttf`.
    static let commissionerSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Commissioner-SemiBold", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-Black", withExtension: "ttf")`
    static func commissionerBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-Bold", withExtension: "ttf")`
    static func commissionerBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-ExtraBold", withExtension: "ttf")`
    static func commissionerExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-Light", withExtension: "ttf")`
    static func commissionerLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-Medium", withExtension: "ttf")`
    static func commissionerMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-Regular", withExtension: "ttf")`
    static func commissionerRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Commissioner-SemiBold", withExtension: "ttf")`
    static func commissionerSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commissionerSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `Commissioner-Black`.
    static let commissionerBlack = Rswift.FontResource(fontName: "Commissioner-Black")
    /// Font `Commissioner-Bold`.
    static let commissionerBold = Rswift.FontResource(fontName: "Commissioner-Bold")
    /// Font `Commissioner-ExtraBold`.
    static let commissionerExtraBold = Rswift.FontResource(fontName: "Commissioner-ExtraBold")
    /// Font `Commissioner-Light`.
    static let commissionerLight = Rswift.FontResource(fontName: "Commissioner-Light")
    /// Font `Commissioner-Medium`.
    static let commissionerMedium = Rswift.FontResource(fontName: "Commissioner-Medium")
    /// Font `Commissioner-Regular`.
    static let commissionerRegular = Rswift.FontResource(fontName: "Commissioner-Regular")
    /// Font `Commissioner-SemiBold`.
    static let commissionerSemiBold = Rswift.FontResource(fontName: "Commissioner-SemiBold")

    /// `UIFont(name: "Commissioner-Black", size: ...)`
    static func commissionerBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerBlack, size: size)
    }

    /// `UIFont(name: "Commissioner-Bold", size: ...)`
    static func commissionerBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerBold, size: size)
    }

    /// `UIFont(name: "Commissioner-ExtraBold", size: ...)`
    static func commissionerExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerExtraBold, size: size)
    }

    /// `UIFont(name: "Commissioner-Light", size: ...)`
    static func commissionerLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerLight, size: size)
    }

    /// `UIFont(name: "Commissioner-Medium", size: ...)`
    static func commissionerMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerMedium, size: size)
    }

    /// `UIFont(name: "Commissioner-Regular", size: ...)`
    static func commissionerRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerRegular, size: size)
    }

    /// `UIFont(name: "Commissioner-SemiBold", size: ...)`
    static func commissionerSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: commissionerSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.commissionerBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-Black' could not be loaded, is 'Commissioner-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-Bold' could not be loaded, is 'Commissioner-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-ExtraBold' could not be loaded, is 'Commissioner-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-Light' could not be loaded, is 'Commissioner-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-Medium' could not be loaded, is 'Commissioner-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-Regular' could not be loaded, is 'Commissioner-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.commissionerSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Commissioner-SemiBold' could not be loaded, is 'Commissioner-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 71 images.
  struct image {
    /// Image `Ellipse 1allK`.
    static let ellipse1allK = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 1allK")
    /// Image `Illustration3`.
    static let illustration3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustration3")
    /// Image `Illustration`.
    static let illustration = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustration")
    /// Image `Rent It`.
    static let rentIt = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rent It")
    /// Image `ads1`.
    static let ads1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ads1")
    /// Image `ads2`.
    static let ads2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ads2")
    /// Image `allK`.
    static let allK = Rswift.ImageResource(bundle: R.hostingBundle, name: "allK")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bookK`.
    static let bookK = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookK")
    /// Image `carK`.
    static let carK = Rswift.ImageResource(bundle: R.hostingBundle, name: "carK")
    /// Image `cardbac`.
    static let cardbac = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardbac")
    /// Image `cardimg`.
    static let cardimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardimg")
    /// Image `cardlik`.
    static let cardlik = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardlik")
    /// Image `cardopt`.
    static let cardopt = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardopt")
    /// Image `cardupl`.
    static let cardupl = Rswift.ImageResource(bundle: R.hostingBundle, name: "cardupl")
    /// Image `chatRead`.
    static let chatRead = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatRead")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `childK`.
    static let childK = Rswift.ImageResource(bundle: R.hostingBundle, name: "childK")
    /// Image `clip`.
    static let clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "clip")
    /// Image `colcha`.
    static let colcha = Rswift.ImageResource(bundle: R.hostingBundle, name: "colcha")
    /// Image `collik2`.
    static let collik2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "collik2")
    /// Image `collik`.
    static let collik = Rswift.ImageResource(bundle: R.hostingBundle, name: "collik")
    /// Image `colopt`.
    static let colopt = Rswift.ImageResource(bundle: R.hostingBundle, name: "colopt")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `compareIllustration`.
    static let compareIllustration = Rswift.ImageResource(bundle: R.hostingBundle, name: "compareIllustration")
    /// Image `compare`.
    static let compare = Rswift.ImageResource(bundle: R.hostingBundle, name: "compare")
    /// Image `empty`.
    static let empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty")
    /// Image `envelope`.
    static let envelope = Rswift.ImageResource(bundle: R.hostingBundle, name: "envelope")
    /// Image `exampleImg`.
    static let exampleImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "exampleImg")
    /// Image `favIllustration`.
    static let favIllustration = Rswift.ImageResource(bundle: R.hostingBundle, name: "favIllustration")
    /// Image `favorites`.
    static let favorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorites")
    /// Image `front`.
    static let front = Rswift.ImageResource(bundle: R.hostingBundle, name: "front")
    /// Image `full`.
    static let full = Rswift.ImageResource(bundle: R.hostingBundle, name: "full")
    /// Image `homeK`.
    static let homeK = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeK")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `like2`.
    static let like2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "like2")
    /// Image `medicineK`.
    static let medicineK = Rswift.ImageResource(bundle: R.hostingBundle, name: "medicineK")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `person`.
    static let person = Rswift.ImageResource(bundle: R.hostingBundle, name: "person")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `plantK`.
    static let plantK = Rswift.ImageResource(bundle: R.hostingBundle, name: "plantK")
    /// Image `popKat2`.
    static let popKat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "popKat2")
    /// Image `popKat3`.
    static let popKat3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "popKat3")
    /// Image `popkat1`.
    static let popkat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "popkat1")
    /// Image `printerK`.
    static let printerK = Rswift.ImageResource(bundle: R.hostingBundle, name: "printerK")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `read`.
    static let read = Rswift.ImageResource(bundle: R.hostingBundle, name: "read")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selected`.
    static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `serviceK`.
    static let serviceK = Rswift.ImageResource(bundle: R.hostingBundle, name: "serviceK")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `shirtK`.
    static let shirtK = Rswift.ImageResource(bundle: R.hostingBundle, name: "shirtK")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `star 2`.
    static let star2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star 2")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `submit`.
    static let submit = Rswift.ImageResource(bundle: R.hostingBundle, name: "submit")
    /// Image `support`.
    static let support = Rswift.ImageResource(bundle: R.hostingBundle, name: "support")
    /// Image `tariff`.
    static let tariff = Rswift.ImageResource(bundle: R.hostingBundle, name: "tariff")
    /// Image `teleK`.
    static let teleK = Rswift.ImageResource(bundle: R.hostingBundle, name: "teleK")
    /// Image `threeDots`.
    static let threeDots = Rswift.ImageResource(bundle: R.hostingBundle, name: "threeDots")
    /// Image `toComment`.
    static let toComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "toComment")
    /// Image `uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck")
    /// Image `unread`.
    static let unread = Rswift.ImageResource(bundle: R.hostingBundle, name: "unread")
    /// Image `unselected`.
    static let unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected")
    /// Image `userImg`.
    static let userImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "userImg")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `view2`.
    static let view2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "view2")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 1allK", bundle: ..., traitCollection: ...)`
    static func ellipse1allK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse1allK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustration", bundle: ..., traitCollection: ...)`
    static func illustration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustration3", bundle: ..., traitCollection: ...)`
    static func illustration3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rent It", bundle: ..., traitCollection: ...)`
    static func rentIt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rentIt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ads1", bundle: ..., traitCollection: ...)`
    static func ads1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ads1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ads2", bundle: ..., traitCollection: ...)`
    static func ads2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ads2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "allK", bundle: ..., traitCollection: ...)`
    static func allK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.allK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookK", bundle: ..., traitCollection: ...)`
    static func bookK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carK", bundle: ..., traitCollection: ...)`
    static func carK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardbac", bundle: ..., traitCollection: ...)`
    static func cardbac(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardbac, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardimg", bundle: ..., traitCollection: ...)`
    static func cardimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardlik", bundle: ..., traitCollection: ...)`
    static func cardlik(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardlik, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardopt", bundle: ..., traitCollection: ...)`
    static func cardopt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardopt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cardupl", bundle: ..., traitCollection: ...)`
    static func cardupl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardupl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatRead", bundle: ..., traitCollection: ...)`
    static func chatRead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatRead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "childK", bundle: ..., traitCollection: ...)`
    static func childK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.childK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clip", bundle: ..., traitCollection: ...)`
    static func clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "colcha", bundle: ..., traitCollection: ...)`
    static func colcha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colcha, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "collik", bundle: ..., traitCollection: ...)`
    static func collik(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collik, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "collik2", bundle: ..., traitCollection: ...)`
    static func collik2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collik2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "colopt", bundle: ..., traitCollection: ...)`
    static func colopt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colopt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "compare", bundle: ..., traitCollection: ...)`
    static func compare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "compareIllustration", bundle: ..., traitCollection: ...)`
    static func compareIllustration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compareIllustration, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty", bundle: ..., traitCollection: ...)`
    static func empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "envelope", bundle: ..., traitCollection: ...)`
    static func envelope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envelope, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exampleImg", bundle: ..., traitCollection: ...)`
    static func exampleImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exampleImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favIllustration", bundle: ..., traitCollection: ...)`
    static func favIllustration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favIllustration, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorites", bundle: ..., traitCollection: ...)`
    static func favorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "front", bundle: ..., traitCollection: ...)`
    static func front(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.front, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "full", bundle: ..., traitCollection: ...)`
    static func full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeK", bundle: ..., traitCollection: ...)`
    static func homeK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like2", bundle: ..., traitCollection: ...)`
    static func like2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "medicineK", bundle: ..., traitCollection: ...)`
    static func medicineK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medicineK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "person", bundle: ..., traitCollection: ...)`
    static func person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plantK", bundle: ..., traitCollection: ...)`
    static func plantK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plantK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popKat2", bundle: ..., traitCollection: ...)`
    static func popKat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popKat2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popKat3", bundle: ..., traitCollection: ...)`
    static func popKat3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popKat3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popkat1", bundle: ..., traitCollection: ...)`
    static func popkat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popkat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "printerK", bundle: ..., traitCollection: ...)`
    static func printerK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.printerK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "read", bundle: ..., traitCollection: ...)`
    static func read(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.read, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected", bundle: ..., traitCollection: ...)`
    static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "serviceK", bundle: ..., traitCollection: ...)`
    static func serviceK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shirtK", bundle: ..., traitCollection: ...)`
    static func shirtK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shirtK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star 2", bundle: ..., traitCollection: ...)`
    static func star2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "submit", bundle: ..., traitCollection: ...)`
    static func submit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.submit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "support", bundle: ..., traitCollection: ...)`
    static func support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tariff", bundle: ..., traitCollection: ...)`
    static func tariff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tariff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "teleK", bundle: ..., traitCollection: ...)`
    static func teleK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teleK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "threeDots", bundle: ..., traitCollection: ...)`
    static func threeDots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.threeDots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toComment", bundle: ..., traitCollection: ...)`
    static func toComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unread", bundle: ..., traitCollection: ...)`
    static func unread(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unread, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected", bundle: ..., traitCollection: ...)`
    static func unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userImg", bundle: ..., traitCollection: ...)`
    static func userImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view2", bundle: ..., traitCollection: ...)`
    static func view2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
